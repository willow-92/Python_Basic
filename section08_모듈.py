# section08
# 파이썬 모듈과 패키지
# 패키지, 모듈 -> 코딩하면서 print 함수, 그 밖의 reverse, for문에서 사용하는 range들은 패키지 형태로 파이썬에서 제공하고 있던 것
# 의미는 몰랐지만 빌트인 패키지를 통해 함수를 사용하고 있었다는 것. 
# 직접 패키지 형태로 모듈을 코딩해서 직접 vs 코드에서 실행
# 패키지 설정
# 모듈 사용 및 Alias 설정
# 패키지 사용 장점

# 파일 하나 하나의 단위를 모듈이라고 볼 수 있음
# 이 파일들을 가지고 있는 python_basic이라는 폴더를 패키지라고 볼 수 있음. 
# 모듈을 디렉토리 구조로 구조적으로 관리하는 것을 패키지라고 한다. 
# 예를 들어, 부엌에서 사용하는 도구들이 있는데, 국자나 후라이팬, 이건 부엌 패키지에 있는 어떤 도구들이라고 볼 수 있음
# 또는 안방, 안방에는 침대, TV 이런 것들은 안방 패키지에 있는 모듈이라고 볼 수 있음.
# 목적에 맞는 것들을 잘 모아서 폴더 안에 모아놔야 추정하기도 쉽고, 성능 개선도 쉽고
# 또 필요할 때 패키지를 찾아가서 사용을 하거나 수정할 수 있음

# 이런 파일 하나하나를 독립적인 기능을 제공하는 모듈
# 코드를 논리적으로 묶어서 사용할 수 있음. 
# seciton 5-2는 반복문에 관한, for 문을 사용해 볼 수 있는 모듈이라고 볼 수 있고.
# 이런 패키지는 python을 공부하는 패키지라고 가정한다면, 
# python_basic 패키지 안에는 데이터 타입 모듈이 들어 있는 것으로 볼 수 있다.
# 즉 폴더를 구매폴더, 상품폴더, 결제폴더 이렇게 만든다면 결제 패키지 않에는 결제 관련 모듈을 개발하면 되고
# 구매와 관해서는 장바구니에 담는다거나, 구매 결정을 눌렀을 때 나오는 프로세스를 개발하면 되고
# 회원 패키지는 회원 관리하고, 반품 환불 이런 것도 처리 해줘야 하고. 결국 폴더 패키지 형태로 구성을 해서 모듈을 파이썬 파일을 만들어서 개발을 하는 것이 모듈과 패키지
# 파이썬의 강력한 원칙. 앞으로 파이썬을 활용할 때 모든 것들은 외부에서 패키지 형태로 제공을 해준다. 내가 패키지 줄테니까 가져다가 쓰기만 하면 돼
# 그렇게 패키지 형태로 배포 하거나 사용을 하기 때문에. 

# 패키지 예제
# 상대 경로
# .. : 부모 디렉토리로
# .  : 현재 디렉토리로

# 패키지가 폴더라고 했으니까 어느 폴더의 경로에 있다는 것을 사용하기 위해서 상대 경로를 사용한다는 것을 알고 있어야 한다. 
# 폴더를 하나 만들자. pkg 폴더를 만들어서 이 안에 파이썬 파일을 만들어서 section08에서 패키지에 있는 모듈을 직접 불러와서 사용
# 이때 파일의 이름이 중요하다. 파일 이름을 통해서 어떤 모듈이 있는지 예측할 수 있다. 

# 피보나치 모듈(파일)을 pkg 폴더 안에 넣었는데, 
# 피보나치를 출력해주는 함수와 값을 반환하는 함수가 피보나치 클래스 안에 들어있다. 
# 패키지 형태가 피보나치 파이썬 파일 안에, 대문자 피보나치 클래스 안에 함수들이 있는 것. 
# 구조대로 나열할 수 있다는 것이고. 이 pkg 안에 수학 공식을 계산해주는 파일을 추가해주면 pkg 패키지는 수열을 처리하는 패키지구나 하고 알 수가 있다. 

# prints와 calculations 모듈도 만들었는데, 다양한 패키지를 import 해서 사용해볼 것


# 사용 1 (클래스)
# 피보나치는 아까 클래스 형태였음. 
from pkg.fibonacci import Fibonacci

Fibonacci.fib(300)

print("ex1 : ", Fibonacci.fib2(400))
print("ex1 : ", Fibonacci().title)


# 사용2  -> 권장하지는 않음. 메모리를 많이 차지함
from pkg.fibonacci import * #전부 다 가져오겠다는 의미. 근데 사용하지 않는 것들을 가져오면 리소스 낭비가 되기 때문에 절대 권장하지 않음. 


# 사용3 (클래스) -> Ailias 사용 -> 권장
from pkg.fibonacci import Fibonacci as fb 
print("ex1 : ", fb.fib2(1600))
print("ex1 : ", fb().title)

# 사용 4(함수)
import pkg.calculations as c
print("ex4 : ", c.add(10,100))
print("ex4 : ", c.mul(10,100))

# 사용 5(함수)
from pkg.calculations import div as d # 항상 필요한 만큼만 가져와서 사용하는게 코드상에는 좋다. 리소스를 낭비하지 않고 필요한 부분만 가져다가 적합한 장소에 쓰는게 좋음. 
print("ex5 : ", int(d(100,10)))

# 사용 6
import pkg.pritns as p
import builtins
p.prt1()
p.part2()
print(dir(builtins))

# pkg 폴더 안에 파이선 2점대 버전에서는 __init__.py 파일을 만들어 줘야 함
# 이 파일이 있는 이 폴더를 패키지로 인식하는게 있다. 2점대 버전에서는. 
# 용도: 해당 디렉토리가 패키지임을 선언할 때 쓰는 것. 
# 3점대에서는 파일이 없어도 패키지를 인식한다. 
# 하위 호환을 위해서 생성해 놓는 것을 추천함. 

# 모듈 파일을 테스트 하고 싶을 때.
# control shift b를 해봤자 함수를 실행해봐야 아는데,
# 단위 테스트를 할 수 있는 부분이 있는데,

# 단위 실행 (독립적으로 파일 실행)
# 파이썬 2점대 버전
# if __name__ == "__main__" :
#     print(prt1())
#     print(part2())

# section 08에서 실행할 때는 이 파일에서 실행하는게 아니라 section8에서 실행하는 것이라 main이 아니기 때문에 실행되지 않음. 
# 위와 같은 것들을 만들어 놓고. 직접 파일로 와서 실행하면 잘 되지만, section 8에서 실행하면 if 문이라 실행되지 않으므
# 단위 테스트를 할 때 해당 모듈 맨 아래 부분에 if __name__ == "__main__" : 이런 테스트 코드를 생성해 놓는 것도 좋다. 
ㄴ
# 모듈과 패키지의 전체 내용은 이게 전부.
