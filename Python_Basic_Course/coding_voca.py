'''
컴퓨터 : 기계의 집합체. 
RAM : 기억 장치 
CPU : 연산 장치 -> 계산
HDD/SDD : 저장 
메인보드 : 각 부품을 한 번에 관리

컴퓨터를 어떻게 조작하는가? 
운영체제를 통해서 조작. 
인간이 기계를 만들 수 있도록 하는 기반이 되는 프로그램
ex) android, ios, windows10, Linux etc
리눅스는 오픈소스이고 무료임. 코드도 공개되어 있어서 컴퓨터가 여러대 필요하고 서버도 여러대가 필요할 경우 보통 리눅스를 사용

코딩이라는 것?
OS에 명령을 내리는 것. 
OS가 기계를 다룰 때 OS에 명령을 내려서 기계를 제어하는 것이 코딩
ex) 한 시간 뒤에 컴퓨터를 종료

해당 명령을 어떤 언어를 통해서 전달할 것인가가 프로그래밍 언어. 
컴퓨터를 끄게 할 되 php로 할 것이냐 Java로 할 것이냐. 이런게 프로그래밍 언어.
프로그래밍 언어가 할 수 있는게 있고 없는게 있고 그런게 아니라 특성이 다른 것. 

코딩을 미리 해 놓고 반복적으로 동작하는 것이 프로그램. 
코딩은 늘 프로그램을 만드는 것.
그래서 프로그래밍이라고도 부름. 

파워포인트나 워드 같은 프로그램들이 누군가 코딩을 해 놓은 것이 반복적으로 작동하는 개념

---
컴퓨터 끼리 상호작용을 할 때 사용하는 것이 인터넷. 
컴퓨터가 대화를 하고자 할 때 규칙이 없다면 혼란이 초래됨. 즉 규칙이 필요함.
그래서 나온 것이 웹이라는 개념. 
http라고 붙이는 것이 웹. 웹통신
이 외에 여러 통신 방법들이 존재함. 

http 자체는 내가 지금부터 웹통신을 할 것이라는 의미. 
현재는 https인 곳이 꽤 된다. 
이 s는 보안을 더 강화했다는 의미.

어떻게? 
암구호 표를 둘 다 가지고 있다고 가정해보자.
올 때 천둥 하나랑 비둘기 사와 하면 암구호표를 가지고 있는 사람은 어떤 의미인지 이해할 수 있게 됨. 
이런 것이 https라고 생각하면 편함. 

아무 언어로 OS에 명령을 내리는데, 특별히 어떤 명령이냐?
http 요청이 오면 특정 파일을 누군가에게 보내라. 
이게 바로 웹 서버를 만들었다고 이야기 하는 것. 

코딩 -> 운영체제에 명령을 내리는 것. 
명령을 내릴 때 이 언어는 무엇을 사용해도 상관이 없다. 
그러나 특별한 명령, 인터넷에서 잘 듣고 있다가 웹통신을 해라 이게 웹서버를 만들었다고 표현 하는 것. 


웹서비스의 동작 방식
서버가 터졌다? 
서버는 어떤 존재?
사람들이 같이 쓰는 서비스를 만드려고 함. 
그러려면 중간에서 누군가가 데이터를 관리해줘야 함. 
그래야 데이터가 일관성이 있게 나감. 

가운데서 혼자 데이터를 주거니 받거니 하는 역할을 하는 것이 서버. 
그렇기 때문에 사람이 많아지면 힘들어지게 됨. 
서버는 하나인데, 요청하는 사람이 많아지니까.

서버가 터지면 카톡이 안되는 이유? 
내가 누군가한테 카톡을 보냈는데 서버가 터졌다고 왜 카톡이 안 되는 것일까? 
서버를 통해서 가기 때문. 서버가 그것을 받아서 줘야 하는데, 그 과정이 이루어 지지 않음.

그럼 서버는 뭐냐?
그냥 컴퓨터. 서버는 사람으로 치면 직업이다. 
모든 컴퓨터가 다 서버가 되지는 않는다. 

잘 듣고 있다가 누가 요청하면 어떤 파일을 주어라, 하는게 서버.
이렇게 코딩을 하고 프로그램을 돌리면 서버의 역할을 할 수 있게 되는 것.
서버란 직업이라고 볼 수 있음. 

내 컴퓨터에서 서버를 돌리면서 게임도 하고, 데이터베이스에 데이터도 저장할 수 있고.

웹 브라우저는? 
naver.com을 입력했을 때 서버에 요청을 보낸다. 
그러면 naver 서버 컴퓨터에서 무언가를 내려주는데, 그걸 그대로 그려주는 역할. 
그 무언가가 뭐냐? 뼈대. 꾸미기. 움직이기. 이 3가지를 내려줌. html, css, javascript
브라우저는 그려주기만 함. 

새로고침을 하면 다시 서버로 부터 받아오기 때문에 개발자도구에서 값을 바꿔놔도 원상복구 됨. 

그런데 꼭 이렇게 매번 페이지를 새로 줘야 할까? 
데이터만 갈아끼우고 싶을때는? 데이터만 줄 수 있음. 
그러나 이때에도 규칙이 있어야 함. 
이때 사용하는 규칙이 JSON
중괄호로 계속 이어지는 것이 제이슨 방식의 특징. 

이 제이슨을 어디서 많이 쓸까?
특히 앱에서 많이 사용함.
앱은 껍데기는 다 가지고 있고 데이터만 껍데기에 붙여주는 개념이다. 
어떤 사진이 들어갈 자리, 글이 들어갈 자리 이런 껍데기는 가지고 있고
특정 데이터를 요청하면 껍데기에 데이터를 넣어서 붙여주는 것. 

웹은 껍데기가 따로 없기 때문에 매번 새로 받아옴. 

서버 = 가운데서 데이터를 주거니 받거니. 요청오는 사람이 많아지면 서버가 힘들어짐. 
서버는 특별한 컴퓨터가 아님. 컴퓨터의 역할임. 

브라우저 = 서버에 무언가 그릴게 있는지 물어보고 받아와서 그려주는 역할
웹 = 웹은 다 다운받아온다. 앱은 데이터(json)만 받아옴. 왜? 껍데기는 이미 가지고 있으니까. 

서버와 클라이언트의 통신
예를 들어 은행을 서버라고 가정. 
많은 사람들이 은행으로 데이터를 찾으러 온다고 가정.
고객은 클라이언트. 무조건 요청을 하는 쪽이 클라이언트.
잔고를 확인하고 싶다면 번호표를 뽑고 입출금 창구에 가서 민증을 보여준다. 막 하면 안됨. 
은행과 미리 약속한 곳으로 가야 함. 
그 규칙을 알려줘야 확인

예금창고에 신분증을 들고 가야 응답이 나옴. 
가장 기본적인 개념

컴퓨터로 돌아오면, 
여러가지 은행 창구처럼 컴퓨터에도, 웹서버에도 창구들이 존재함. 
A 창구는 아이디를 가지고 오면 주문 내역을 알려줌
B 창구는 주소를 가지고 오면 음식점을 알려줌
C 창구는 주문번호를 가지고 오면 배달 현황을 알려줌. 

이런 식으로 여러가지 창구가 짜여져 있음. 
이런것을 API라고 함. 

API는 서버에서 미리 만들어 둔 기능이자, 약속이다. 
누구와 한 약속이냐? 클라이언트와.
더 구체적으로 말하면 클라이언트 개발자와 서버 개발자가 미리 한 약속이다. 
음식점 리스트를 부를 때 B로 요청해주시고, 주소를 꼭 가져와라. 그럼 이렇게 정보를 주겠다. 
미리 회의를 함. 그래야 클라이언트는 클라이언트대로 개발을 하고, 서버는 서버대로 개발을 한다. 
이런게 많아지면 너무 많으니 문서로 적어놓자고 하는 것이 API 명세서이다. 

API의 생김새
의외로 맨날 보고 있음. 
우리은행 용산지점에 입출금창구를 가는데 민번을 가지고 가는 상황.
http://우리은행 용산지점/입출금장구? 신분증 = 주민등록번호
우리은행 용산지점 -> 서버 위치
입출금창구 API 주소
주민등록번호 -  가져가기로 한 데이터

네이버 영화페이지를 보면 페이지 주소에 movie.naver.com이 서버 위치
movie/bi/mi/basic.naver API 주소
?code = 10016 ? 뒷 부분이 가져가기로 한 데이터. 

ㅇㅇ님 신규 피쳐라 API 하나만 따주세요
-> 새로운 기능 창구를 하나 만들어달라. 그 쪽으로 요청하겠음 (명세서도 같이 줘야 함)

API 개발은 끝났고, 클라이언트는 아직이에요
= 창구는 다 만들었는데, 요청 하는 쪽이 아직 작업 중

OpenAPI는 뭐냐?
누구나 요청할 수 있게 열어 둔 API.
그럼 위에 API는 누구나 요청할 수 없다? 당연하다. 
카피가 쉬워짐. 보안처리가 보통 다 되어 있음.

open api는 공공데이터 같은 곳에서 많이 열어둠

정리
일단 요청하면 다 클라이언트. 
서버는 요청을 받고 데이터를 주는 쪽
요청을 받을 때 뭔가 출입문이 있다. 그걸 이 API (창구)가 문
이걸 잘 받기 위해서 대기하는게 웹서버의 역할. 계속 돌면서 기다림.
창구 요청이 오면 그 요청에 대해서 수행을 함. 필요에 따라서 본인이 가지고 있는
HTML,CSS를 줄 수도 있고. 
아니면 뭔가 데이터를 조회해서 제이슨 형식으로 앱 같은데 내려줄 수도 있음. 
이게 다 우리 눈에 보이지 않으나, 브라우저와 앱 뒤에서 이루어지고 있음. 

API는 창구이자 약속이다. 
API 따달라고 하는건 하나의 기능을 새로 만들어달라고 하는 것. 
평소에 보는 URL 처럼 생겼음. 실행하지 않아도 앱이나 브라우저 뒷 단에서 돌고 있음. 

웹이든, 앱이든 서버 입장에서는 누가 요청하든 상관이 없음. 
앱 전문 서버, 웹 전문 서버 이런 것 없음.
서버는 나는 창구만 만들어 둘 뿐 이라는 기조. 



개발 언어와 프레임워크
프로그래밍 언어가 무엇?
OS에 명령을 내리는 것. 인터넷에서 잘 듣고 있다가 요청이 오면 응답을 줘. 이게 서버를 만드는 명령. 
서버를 다 만드는게 정말 어려움. 굉장히 학문적인 것도 많이 알아야 함. 
그래서 통상 제로 부터 서버를 만드는 사람은 없음. 
그래서 프레임워크를 이용함. 미리 만들어 놓은 블록 세트라고 생각하면 편함.
예를들어, 자바, 노드js, 파이썬 이런 언어마다 서버를 만들 수 있는 블록 세트가 유명한 것들이 정해져 있음.
자바의 경우 스프링.
노드 제이에스의 경우 익스프레스
파이썬은 장고나 플라스크 같은 것을 사용함

프레임워크가 더 많으나, 유명한 것들로 쓰는 추세. 그래야 검색을 했을 때 자료가 많이 나옴. 

서버를 만들 때 프레임워크에서 여러 기능이 있는데, 그 기능을 가져다가 써서 만드는 것.
그래서 프레임워크를 잘 쓰는 것이 중요함.

자바로 서버를 만드려고 하면 자바를 잘 하는 것도 중요하지만 스프링을 얼마나 잘 다루냐,
스프링 프레임워크에 대한 이해도나 경험이 많으냐가 중요

파이썬 -  데이터 분석으로 많이 쓰니까, 
데이터 분석하는 사람이 파이썬을 잘 하니까 파이썬으로 만들 수 있다?
그렇지 않음. 장고를 다룰 수 없으면, 플라스크라는 프레임워크가 어떻게 동작하는지 모르면 서버를 만들 수 없음.
두개 다 잘 알아야 한다. 

그러면 어떤 언어, 어떤 프레임워크가 좋은 것이냐?
좋고 나쁜 것은 없음.
서로 특성이 다른 것.
밥먹자고 이야기를 할 때 프랑스어로도 이야기 할 수 있고. 독일어로도 할 수 있고. 
예를 들면 왜 파이썬인가? 입문하기 쉽지만 깊이 가면 어려운 부분이 나옴. 
어떤 것은 시작이 어려운데 뒤에 가면 쉽고. 이렇게 속성이 다 다름. 

언어별 용처와 특징
프론트엔드
웹서버는 HTML, CSS, JAVA SCRIPT를 가지고 있다가 브라우저로 부터 요청이 들어오면 내려주고 이대로 그리라고 함
이 HTML, CSS< JAVA SCRIPT는 당연히 프로트엔드 언어에 분류가 됨. 가장 많이 쓰이고 가장 기초가 됨. 
요새는 이런 것들을 조금 더 잘 쓰기 위해서 프론트엔드에도 프레임워크를 사용함.
앵귤러나 뷰, 리액트 이렇게 자바스크립트 기반의 프레임워크들이 많이 나왔음.
이 친구들을 이용하면 용량을 조금 더 적게 배울 수 있다던지.
요새는 리액트가 대세라는 말이 많이 있음. 
그렇지만 셋 다 뿌리가 비슷해서 셋 중 하나를 잘 하면 다른 것도 금방 배움. 

서버
HTML, CSS, JAVASCRIPT를 제외한 거의 모든 언어는 서버 사이드 랭귀지라고 봐도 무방.
자바, 파이썬, 노드가 많이 쓰이는 것 같다. 

자바는 조금 어렵고 형식이 있음. 큰 회사에서 많이 씀. 
형식이 있다는 것은 코딩을 하는데 있어서 초반에 얼기설기 하면 안 됨.
시간은 걸리지만 안정적이고 에러 대응이 좋다. 
예를들면 쿠팡, 배민 등에서 사용

파이썬
쉽게 입문할 수 있고 자유로움. 
데이터 분석에도 쓰이고 있음.

노드제이에스
자바스크립트를 서버 버전으로 만든 것.
노드제이에스와 리액트로 하면 문법이 자바스크립트로 똑같음. 

자바와 자바스크립트의 차이
바다와 바다코끼리
인도와 인도네시아 아무 관련이 없음. 

그 외
씨 언어. 씨쁠쁠
임베디드나 칩. 아이오티.
간혹 게임회사는 씨언어로 서버를 만들기도 함.
굉장히 헤비한 일을 할 때.
씨 라는 언어가 다른 언어들 보다 조금 더 컴퓨터와 가까운 언어.
더 정교하여 명령을 내릴 수 있음. 

고
쉬운데 적당이 형식이 있는 언어

타입스크립트
자바스크립트가 굉장히 자유로움. 내가 에러를 냈어도 어디서 냈는지 찾기 어려움
거기서 타입을 얹은게 타입스크립트. 

그 외에
앱을 만들 때, 안드로이드 앱은 코틀린, 아이오에스는 스위프트라는 언어를 써야 함.
플러터나 리액트 네이티브라는 프레임워크를 이용해서 한 번에 개발하는 경우도 있음. 

한 번에 개발하는게 예전에는 안 좋다고 했었는데, 요새는 성능면에서도 큰 차이가 없다고 함

정리를 하면
웹에는
HTML, CSS, Javascript
자바스크립트 기반의 프레임워크로 리액트, 뷰, 앵귤러가 있음. 

앱
안드로이드(코틀린)
아이폰(스위프트)
둘다 - 플러터, 리액트 네이티브

서버
자바(스프링)
파이썬(장고, 플라스크)
노드제이에스(익스프레스)

그 외에 데이터 분석을 할 때는 파이썬이나 에스큐엘을 다룰 줄 알면 좋다.

언어에는 좋고 나쁨이 없다.
특성만 있다. 
상황을 고려해서 선택을 하는게 좋다.

내가 누구랑 창업을 하기로 했다, 근데 php를 잘 한다 그럼 그냥 php로 만들면 된다.
구지 요새 유행하는 뭘 가져다가 할 필요 없음.
본인의 상황을 고려해서 하면 된다. 안 되는 기능들은 없다. 

프레임 워크로 만들고, 잘 사용하는 것이 중요하다. 

개발자가 100명 있는 회사가 있다. 
프론트와 백엔드 개발자 비율이 어떻게 될까? 
회사마다 다를 수 있지만 백엔드 개발자가 월등히 많다. 
1:9 아니면 2:8 이런 식의 비율일 정도로 많다.


아키텍쳐와 디비
서버 안에는 엄청나게 많은 역할들이 존재한다. 
스타트업의 성장기와 함께 볼 수 있음.

초창기에는 서버와 클라이언트. 돈도 별로 없고 사용자도 별로 없음.
서버 안에 웹 서버도 있고, 디비도 다 들어있음

조금 더 회사가 커졌다,
그러면 웹서버 하나 디비 서버 하나 이런 식으로 분리함

더 커지면
웹서버가 여러개가 되고
라우터 (교통순경) 요청을 받으면 비어있는 웹서버에 빨리 요청을 주고.

데이터는 한 곳에서 관리하는게 통상적이어서 디비 서버. 
이런 식의 구조가 짜여짐. 

그 다음에는 이미지는 위에서 디비를 이미지만 관리하는 디비, 텍스트용 디비로 나눔. 

더 커지면 서버가 죽었는지 살았는지 알고 싶은 것. 
서버가 죽었다? 무슨 뜻일까? 컴퓨터가 게임을 하다가 파워포인트를 만들다가 컴퓨터가 멈추는 경험
컴퓨터가 계산을 계속 하다가 너무 초과해버려서 멈춘 경험
이게 서버가 터진것과 동일한 현상

서버로 돌리던 컴퓨터가 멎었다고 생각하면 된다. 
어떻게 하냐? 
개발자가 출동해서 껏다 킨다. 

커지면 엄청 복잡함. 개발자들도 다 그리기가 어려움. 큰 회사일수록. 
이런 서버 컴퓨터를 다 살 수가 없음. 
요새는 인터넷 환경에서 클라우드 환경에서 컴퓨터를 산다. 
이게 이제 종종부르는 AWS 같은 곳에서 시간제로 돈을 내거나, 트래픽으로 돈을 내거나.
요새는 이런 클라우드 환경에서 제공해주는 서비스를 어떻게 엮을것이냐 하는 것도 개발자의 자질 중 하나이다. 
팀의 생산성을 결정짓는 하나의 실력

아직 안 배운 것
데이터베이스
방정리는 왜 할까? 
잘 찾으려고. 
나중에 잘 찾기 위해서 정리를 하는 것. 

데이터베이스는 데이터를 잘 찾게 해주는 프로그램이다. 
저장하는 것 만 할 것이었으면 메모장에 하면 됨.
찾기가 힘듬

경영 섹션안에 출판사별, 책 제목별로 정리되어 있을 때 뭐가 쉬울까/
1) 사랑이라는 단어가 제목에 들어간 책 다 주세요
2) 한국출판사 책 다 주세요

뭐가 쉬울까? 
단어가 들어간 책 다 달라는 것은 책을 처음부터 끝까지 다 검사해야함
한국출판사는 이미 정리가 되어 있음. 출판사별로. 
그래서 훨씬 쉬움. 

이걸 우리가 인덱스를 탄다고 이야기 함.
인덱스를 타지 않는 경우를 풀스캐닝을 한다고 이야기를 함. 

디비도 정렬된 상태대로 찾아야 빠르게 찾을 수 있음.
이 인덱스를 타지 않고 가져오는 것은 책장에 있는 책을 데이터베이스에서 처음부터 끝까지 다 보는 것. 
실제 서비스에서 이렇게 되면 큰일남.
습작 서비스에서는 데이터가 적기 때문에 다 보는게 데이터베이스 입장에서 무리되지 않음.
근데 100만 건, 천만 건 이렇게 되는데 풀 스캐닝이 된다? 이렇게 되면 큰일. 

데이터베이스에는 2가지 종류가 있음.
SQL과 NoSQL(Not onyl SQL)
SQL은 조금 더 정형화 되어 있음. 쉽게 생각하면 표를 그리고 데이터를 넣는 식. 

반면 Nosql은 json 형식으로 다큐먼트를 막 쌓을 수 있음.
예를 들어 초기 스타트업이다, 앞으로 바뀔 게 많으니 우선 nosql식으로 쌓는 것을 추천
근데 꽤 성장한 회사이다, 그러면 데이터를 정형화 해서 쌓고 가지고 있는 것이 관리하기도 편하고, 뭔가 문제도 덜 일어남. 그러한 특성이 있음.

예를 들어 오라클, MySQL 등이 SQL
몽고디비, 레디스, 카산드라, hbase 등이 no-sql

SQL 디비에서 데이터를 꺼내오는 랭귀지를 배워야 된다 - 에스큐엘 배워야 한다.
생각보다 어렵지 않음. 

1. 아키텍쳐는 매우 복잡하다. 
2. 클라우드를 잘 써야 한다. 
3. DB는 두 종류. 인덱스가 중요하다. 

그 인덱스란 정렬된 순서. 


개발자들은 어떻게 협업을 하는가? 
파일도 많고, 파일 안에 내 코드 다른 사람 코드가 다 있는데 어떻게 협업을 하는 것일까? 
이걸 해결해주는 git이라는 프로그램이 있음.
부분을 나눠서 짜고 합치는 프로그램이 존재함. 
git이라는 프로그램

git이라는 프로그램을 작업하는 개발자의 컴퓨터마다 하나씩 깔아둔다. 
그 다음 코드를 모아서 관리할 컴퓨터도 하나 있어야 함. 
이걸 살 수 없으니 빌려옴
이걸 빌려주는 회사가 github.
깃헙에 코드를 보관해서 합치게 되어 있음.

커밋, 푸시, 풀 이렇게 3개 알면 됨
내 컴퓨터에서 작업을 함. 작업하는 족족 올라가면 안됨. 
작업 하다가 업로드를 하고 싶은 세이브 포인트를 만듬. 그게 커밋
그걸 만들면 업로드 하는게 푸시
남이 업로드 한 것을 받아오는게 풀

만약 풀을 받았는데, 내가 작업하는 곳과 충돌이 된다?
그러면 깃이 먼저 알아서 해결함
모르겠으면 유저한테 알림창으로 뭐가 맞냐고 물어봄.

뭔가 브랜치를 따서 작업할 수 있음. 
뭔가 실험하고 싶어서 새로 브랜치를 따서 실험을 하다가 합친다 이걸 머지라고 함. 

개발자들은 협업할 때 깃을 쓴다. 깃헙은 코드를 공통적으로 관리할 수 있는 깃이 깔린 컴퓨터를 빌려주는 곳.
깃에는 커밋, 푸시, 풀이 있다. 
푸시는 업로드, 풀은 땡겨오는 것. 

그럼 어떻게 공부해야 하는가? 
뭘 어떻게 어디서부터 배워야 하냐!?

크게 3가지 형태
코딩에 입문하고 싶다, 코딩이 궁금하다?
그런 사람들은 웹 개발 관련 공부 해보면 됨

데이터 분석 역량을 키우고 싶다? 
기획자/마케터/취준생

어.. 파이썬 하라고 배웠는데, 근데 파이썬 보다 더 키초적인 분석툴이 SQL임.
SQL 문법은 기본임. SQL을 배우면 됨.


개발자 취업 하고 싶은 분들?
그런 사람들은 부트캠프로 가서 밤낮으로 개발을 하면 됨. 









'''