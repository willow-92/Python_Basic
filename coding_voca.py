'''
컴퓨터 : 기계의 집합체. 
RAM : 기억 장치 
CPU : 연산 장치 -> 계산
HDD/SDD : 저장 
메인보드 : 각 부품을 한 번에 관리

컴퓨터를 어떻게 조작하는가? 
운영체제를 통해서 조작. 
인간이 기계를 만들 수 있도록 하는 기반이 되는 프로그램
ex) android, ios, windows10, Linux etc
리눅스는 오픈소스이고 무료임. 코드도 공개되어 있어서 컴퓨터가 여러대 필요하고 서버도 여러대가 필요할 경우 보통 리눅스를 사용

코딩이라는 것?
OS에 명령을 내리는 것. 
OS가 기계를 다룰 때 OS에 명령을 내려서 기계를 제어하는 것이 코딩
ex) 한 시간 뒤에 컴퓨터를 종료

해당 명령을 어떤 언어를 통해서 전달할 것인가가 프로그래밍 언어. 
컴퓨터를 끄게 할 되 php로 할 것이냐 Java로 할 것이냐. 이런게 프로그래밍 언어.
프로그래밍 언어가 할 수 있는게 있고 없는게 있고 그런게 아니라 특성이 다른 것. 

코딩을 미리 해 놓고 반복적으로 동작하는 것이 프로그램. 
코딩은 늘 프로그램을 만드는 것.
그래서 프로그래밍이라고도 부름. 

파워포인트나 워드 같은 프로그램들이 누군가 코딩을 해 놓은 것이 반복적으로 작동하는 개념

---
컴퓨터 끼리 상호작용을 할 때 사용하는 것이 인터넷. 
컴퓨터가 대화를 하고자 할 때 규칙이 없다면 혼란이 초래됨. 즉 규칙이 필요함.
그래서 나온 것이 웹이라는 개념. 
http라고 붙이는 것이 웹. 웹통신
이 외에 여러 통신 방법들이 존재함. 

http 자체는 내가 지금부터 웹통신을 할 것이라는 의미. 
현재는 https인 곳이 꽤 된다. 
이 s는 보안을 더 강화했다는 의미.

어떻게? 
암구호 표를 둘 다 가지고 있다고 가정해보자.
올 때 천둥 하나랑 비둘기 사와 하면 암구호표를 가지고 있는 사람은 어떤 의미인지 이해할 수 있게 됨. 
이런 것이 https라고 생각하면 편함. 

아무 언어로 OS에 명령을 내리는데, 특별히 어떤 명령이냐?
http 요청이 오면 특정 파일을 누군가에게 보내라. 
이게 바로 웹 서버를 만들었다고 이야기 하는 것. 

코딩 -> 운영체제에 명령을 내리는 것. 
명령을 내릴 때 이 언어는 무엇을 사용해도 상관이 없다. 
그러나 특별한 명령, 인터넷에서 잘 듣고 있다가 웹통신을 해라 이게 웹서버를 만들었다고 표현 하는 것. 


웹서비스의 동작 방식
서버가 터졌다? 
서버는 어떤 존재?
사람들이 같이 쓰는 서비스를 만드려고 함. 
그러려면 중간에서 누군가가 데이터를 관리해줘야 함. 
그래야 데이터가 일관성이 있게 나감. 

가운데서 혼자 데이터를 주거니 받거니 하는 역할을 하는 것이 서버. 
그렇기 때문에 사람이 많아지면 힘들어지게 됨. 
서버는 하나인데, 요청하는 사람이 많아지니까.

서버가 터지면 카톡이 안되는 이유? 
내가 누군가한테 카톡을 보냈는데 서버가 터졌다고 왜 카톡이 안 되는 것일까? 
서버를 통해서 가기 때문. 서버가 그것을 받아서 줘야 하는데, 그 과정이 이루어 지지 않음.

그럼 서버는 뭐냐?
그냥 컴퓨터. 서버는 사람으로 치면 직업이다. 
모든 컴퓨터가 다 서버가 되지는 않는다. 

잘 듣고 있다가 누가 요청하면 어떤 파일을 주어라, 하는게 서버.
이렇게 코딩을 하고 프로그램을 돌리면 서버의 역할을 할 수 있게 되는 것.
서버란 직업이라고 볼 수 있음. 

내 컴퓨터에서 서버를 돌리면서 게임도 하고, 데이터베이스에 데이터도 저장할 수 있고.

웹 브라우저는? 
naver.com을 입력했을 때 서버에 요청을 보낸다. 
그러면 naver 서버 컴퓨터에서 무언가를 내려주는데, 그걸 그대로 그려주는 역할. 
그 무언가가 뭐냐? 뼈대. 꾸미기. 움직이기. 이 3가지를 내려줌. html, css, javascript
브라우저는 그려주기만 함. 

새로고침을 하면 다시 서버로 부터 받아오기 때문에 개발자도구에서 값을 바꿔놔도 원상복구 됨. 

그런데 꼭 이렇게 매번 페이지를 새로 줘야 할까? 
데이터만 갈아끼우고 싶을때는? 데이터만 줄 수 있음. 
그러나 이때에도 규칙이 있어야 함. 
이때 사용하는 규칙이 JSON
중괄호로 계속 이어지는 것이 제이슨 방식의 특징. 

이 제이슨을 어디서 많이 쓸까?
특히 앱에서 많이 사용함.
앱은 껍데기는 다 가지고 있고 데이터만 껍데기에 붙여주는 개념이다. 
어떤 사진이 들어갈 자리, 글이 들어갈 자리 이런 껍데기는 가지고 있고
특정 데이터를 요청하면 껍데기에 데이터를 넣어서 붙여주는 것. 

웹은 껍데기가 따로 없기 때문에 매번 새로 받아옴. 

서버 = 가운데서 데이터를 주거니 받거니. 요청오는 사람이 많아지면 서버가 힘들어짐. 
서버는 특별한 컴퓨터가 아님. 컴퓨터의 역할임. 

브라우저 = 서버에 무언가 그릴게 있는지 물어보고 받아와서 그려주는 역할
웹 = 웹은 다 다운받아온다. 앱은 데이터(json)만 받아옴. 왜? 껍데기는 이미 가지고 있으니까. 




'''