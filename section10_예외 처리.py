# section 10
# 파잌썬 예외 처리의 이해
# 예외는 에러를 뜻함. 아무리 수십명 수백명이 같이 협업을 했던라도, 아무리 실력 있는 프로그래머가 개발을 했다고 하더라도,
# 완벽한 프로그래밍은 있을 수가 없다. 항상 예상치 못한 에러가 발생할 수 있고.
# 잘못 된 코딩, 잘못 된 형 변환, 이런 미세한 실수 때문에 프로그램이 잘 운영이 되다가 에러가 발생되어서 긴급상황이 발생하기도 한다.
# 주로 결제 등.
# 수십명 수만명이 결제하는 이벤트를 하는데, 그 순간 에러가 난다면 회사가 입는 피해는 막심하다.
# 그래서 항상 예외, 에러 발생 가능성을 염두해서 코딩하는게 좋다.
# 파이썬에서도 예외처리를 위한 문법이 존재한다.
# 아무리 코드가 에러가 없더라도, 하드웨어에서 나타나는 오류를 완벽하게 잡을 수는 없다.
# 처리를 할 수가 없다.
# 그래서 예외처리를 통해 에러가 발생하는 순간 의도한 대로 코드를 실행하게 해 놓고, 그 부분을 바로 수정 해야 한다.
# 이런 과정을 통해 프로그램이 개선되는 과정이 있다.

# 파이썬의 예외 종류
# 문법적으로는 에러가 없지만, 코드 실행(런타임) 프로세스에서 발생하는 예외 처리도 중요.
# 문법적으로 에러가 나면 vscode나 파이참, 이런 IDE 개발 환경 도구에서 린터라는게 있다. 
# 이 린터가 하는 역활이 문법, 어떤 코드 스타일을 알려주고. 문법을 체크하는 것도 한다. 
# 만약 메모장에서 개발을 하는 것이라면 문법적인 부분도 생각을 해야 겠지만, 요즘은 이제 이런 통합 개발 환경에서 개발하기 때문에 그런 일은 거의 없다.
# 하지만 런타임 실행시 발생될 가능성이 있는 중요한 부분에서는 예외처리가 중요하다.

# SyntaxError : 잘못된 문법
# print('Test)

# if True
# pass

# x => Y

# NameError: 참조 변수 없음
# a = 10
# b = 15
# print(c)

# ZeroDivisionError : 0으로 나누기 에러
# print(10/0)

# IndexError : 인덱스 범위 오버
x = [10, 20, 30]
print(x[3])
